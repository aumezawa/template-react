#!/usr/bin/env babel-node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('template:server');
var express = require('express')
var fs = require('fs');
var http = require('http');
var https = require('https');
var path = require('path');
var terminal = require('../routes/terminal.js');

/**
 * Get configuration from Express.
 */

var http_port = app.get('http_port');
var https_port = app.get('https_port');
var http_enable = app.get('http_enable')

/**
 * Create HTTP server.
 */

var http_server = undefined;
if (http_enable) {
  http_server = http.createServer(app);
} else {
  var http_app = express();
  http_app.all('*', function(req, res) {
    res.redirect('https://' + req.hostname + ':' + https_port + req.url)
  });
  http_server = http.createServer(http_app);
}

/**
 * Create HTTPS server.
 */

var https_key = fs.readFileSync(path.join(__dirname, '../auth/server-key.pem'));
var https_cert = fs.readFileSync(path.join(__dirname, '../auth/server-cert.pem'));
var https_opts = {
  key : https_key,
  cert: https_cert
};
var https_server = https.createServer(https_opts, app);

/**
 * Listen on provided port, on all network interfaces.
 */

http_server.listen(http_port);
http_server.on('error', onErrorHttp);
http_server.on('listening', onListeningHttp);

https_server.listen(https_port);
https_server.on('error', onErrorHttps);
https_server.on('listening', onListeningHttps);

/**
 * Connect to Terminal
 */

terminal(http_server);
terminal(https_server);

/**
 * Event listener for HTTP/HTTPS server "error" event.
 */

function onErrorHttp(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('port ' + http_port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('port ' + http_port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onErrorHttps(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('port ' + https_port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('port ' + https_port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP/HTTPS server "listening" event.
 */

function onListeningHttp() {
  var addr = http_server.address();
  console.log('HTTP server is listening on port ' + addr.port);
}

function onListeningHttps() {
  var addr = https_server.address();
  console.log('HTTPS server is listening on port ' + addr.port);
}
